1- Ler cada linha do arquivo. Transformar decimal e binário(16 bits), dividir em 2. Primeira parte = PAGE NUMBER, segunda parte = OFFSET, converter para decimal.
addresses.txt (endereço da instrução): 
decimal para binário (16 bits)
16916 -> 0100001000010100
8 primeiros = PAGE NUMBER: 01000010 -> 66 (em decimal)
8 últimos = OFFSET (instrução): 00010100 -> 20 (em decimal)

Implementar fifo e lru na memoria. E NA TLB APENAS FIFO


1- PAGE NUMBER VER SE TA NA TLB, SE TIVER OK (TLB HIT++)

2- SE NAO TA NA TLB PROCURA NA PAGE TABLE 
SE NAO TIVER NO PAGE TABLE, PAGE FAULT++. AI TEM Q SUBSTITUIR MEMORIA ETC ETC VER ISSO MLHR

3- PEGA DO BACKSTORAGE o value baseado nno offset e na página


--------------- OUTPUT ---------------
Virtual address: 16916 TLB: 0 Physical address: 20 Value: 0
Number of Translated Addresses = 1000
Page Faults = 538 
Page Fault Rate = 0.538
TLB Hits = 54
TLB Hit Rate = 0.054

- Virtual address: endereço recebido em decimal
- TLB: de 0 a 15 bytes
- Physical address: offset + (valor do frame(tlb)) X 256)
- Value: valor associado a instrução(offset), no backstorage
- contador de endereços
- contador page faults
- rate page fault = contPageFault / contEnd
- contador tlb hits
- rate tlb hit = contTlb / contEnd 

Ordem de fazer as coisas:
OK Leitura e Conversão das Informações do Arquivo 
OK Adição dos Back Storage na memória Principal
OK Adição da Listpage
OK Adição do FIFO na memória e page table
OK Adição do TLB
Adição do LRU


offset, value, address, tlb_index

ITERAR OS ENDEREÇOS, VERIFICAR SE ESTA NA PAGE TABLE E SE NAO TIVER, ADD LA E NA MEMORIA

FIFO physical memory:

if (page fault):
	tira o primeiro elemento do array
	coloca o novo no ultimo elemento (vai pegar de memory, o novo smp sera o 128)



IF page fault
	fifo physical
	fifo page




TLB:
if page number in tlb:
	hit++
else
	verify page table
	se tiver la, bota ele no tlb

ai deixa ele no tlb


void fifo_tlb(Memory *memory) {
    // Replace the entry in the TLB at the FIFO index
    tlb[tlb_fifo_index].page_number = memory->page_number;
    tlb[tlb_fifo_index].frame_number = memory->frame_number;
    tlb[tlb_fifo_index].free = 0;
    memory->tlb_index = tlb_fifo_index;

    // Update the FIFO index
    tlb_fifo_index = (tlb_fifo_index + 1) % TLB_SIZE;
}


LRU - least recently used:
criar um int time

if page in physical:
	page[i].time = get_current_time();


page fault:
least_page = page.time == 0
for page_table
	if page[i].time < least_page
		least_page = 0



